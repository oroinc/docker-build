include:
  - path:
      - compose-session-storage-${ORO_SESSION_STORAGE_TYPE-redis}.yaml

services:
  application:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: -- true
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    depends_on:
      "waf":
        condition: service_started
      "consumer":
        condition: service_started
      "ws":
        condition: service_started
      "cron":
        condition: service_started
      "operator":
        condition: service_started

  waf:
    image: ${ORO_PROJECT}waf:$ORO_WAF_VER
    command: -m nginx
    user: nginx
    restart: unless-stopped
    depends_on:
      "waf-init":
        condition: service_completed_successfully
      "web":
        condition: service_healthy
    volumes:
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - nginx-waf:/opt/oro-nginx
    ports:
      - published: 80
        target: $ORO_NGINX_HTTP_PORT
    networks:
      default:
        aliases:
          - ${ORO_APP_DOMAIN}
          - ${ORO_APP_DOMAIN_B2C}
          - ${ORO_APP_ADDON_DOMAINS}
          - ws

  waf-behat:
    image: ${ORO_PROJECT}waf:$ORO_WAF_VER
    command: -m nginx
    user: nginx
    restart: unless-stopped
    depends_on:
      "waf-init":
        condition: service_completed_successfully
      "web":
        condition: service_started
    volumes:
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - nginx-waf:/opt/oro-nginx
    expose:
      - $ORO_NGINX_HTTP_PORT
    networks:
      default:
        aliases:
          - ${ORO_APP_DOMAIN}
          - ${ORO_APP_DOMAIN_B2C}
          - ${ORO_APP_ADDON_DOMAINS}
          - ws

  web:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: nginx
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    restart: unless-stopped
    healthcheck:
      test: "curl -If http://127.0.0.1:${ORO_UPSTREAM_PORT}/"
      interval: 15s
      timeout: 30s
      start_period: 15s
    depends_on:
      "web-init":
        condition: service_completed_successfully
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache:ro
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - nginx:/opt/oro-nginx

  volume-init:
    image: $ORO_IMAGE:$ORO_IMAGE_TAG
    command: -- true
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    volumes:
      - oro_app:/var/www/oro
 
  waf-init:
    image: ${ORO_PROJECT}nginx-waf-oel8:$ORO_WAF_VER
    entrypoint: bash
    command: 
      - -c
      - |
        sed -i 's/1024/0/g' /variables.schema.json
        /docker-entrypoint.sh -m init
    environment:
      ORO_SITES: $ORO_WAF_SITES
      ORO_HTTP_PROXY_PASS_BACKOFFICE:
      ORO_HTTP_PROXY_PASS_STOREFRONT:
      ORO_GLOBAL_HTTP_PORT: $ORO_NGINX_HTTP_PORT
      ORO_GLOBAL_HTTPS_PORT: $ORO_NGINX_HTTPS_PORT
      ORO_GLOBAL_SHARED_ROOT_DIR:
      ORO_GLOBAL_LOCK_FILE_PATH:
      ORO_GLOBAL_TESTCOOKIE_ENABLE:
      ORO_GLOBAL_DOMAIN_DIRECT: false
      ORO_GLOBAL_USE_ACME: true
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - nginx-waf:/opt/oro-nginx

  web-init:
    image: $ORO_IMAGE:$ORO_IMAGE_TAG
    command: nginx-init
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - nginx:/opt/oro-nginx

  php-fpm-app:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: php-fpm
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    restart: unless-stopped
    user: ${ORO_USER_RUNTIME:-www-data}
    healthcheck:
      test: "php-fpm-healthcheck"
      interval: 5s
      timeout: 30s
      start_period: 15s
    environment:
      ORO_ENV:
      ORO_LOG_PATH: php://stderr
    tmpfs:
      - /tmp
    depends_on:
      "volume-init":
        condition: service_completed_successfully
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache:ro
      - multihost_operation_folder:$ORO_MULTIHOST_OPERATION_FOLDER
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}

  ws:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: websocket
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    restart: unless-stopped
    user: ${ORO_USER_RUNTIME:-www-data}
    init: true
    environment:
      ORO_ENV:
      ORO_LOG_PATH: php://stderr
    tmpfs:
      - /tmp
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache:ro
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}

  consumer:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: consumer
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    restart: unless-stopped
    user: ${ORO_USER_RUNTIME:-www-data}
    init: true
    environment:
      ORO_ENV:
      ORO_LOG_PATH: php://stderr
    tmpfs:
      - /tmp
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - oro_app:/var/www/oro
      - var_data:/var/www/oro/var/data
      - cache:/var/www/oro/var/cache:ro
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}

  cron:
    image: $ORO_IMAGE_BASE_RUNTIME:$ORO_BASELINE_VERSION
    command: cron
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 1024
        hard: 1048576
    environment:
      ORO_ENV:
      ORO_LOG_PATH: php://stderr
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache:ro
      - multihost_operation_folder:$ORO_MULTIHOST_OPERATION_FOLDER
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}

  operator:
    image: $ORO_IMAGE_INIT${ORO_LANGUAGE_SUFFIX-}:$ORO_IMAGE_TAG
    command: operator
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      COMPOSE_PROJECT_NAME: $COMPOSE_PROJECT_NAME
      DOCKER_API_VERSION: v1.43
      ORO_LOG_PATH: php://stderr
    restart: unless-stopped
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - /run/docker.sock:/run/docker.sock
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache
      - multihost_operation_folder:$ORO_MULTIHOST_OPERATION_FOLDER
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - ./../docker/docker-entrypoint-init.sh:/usr/local/bin/docker-entrypoint.sh

  install:
    image: $ORO_IMAGE:$ORO_IMAGE_TAG
    command: install $ORO_INSTALL_OPTIONS
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_SAMPLE_DATA:
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache

  install-test:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    command: console oro:install --timeout=3600
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV: test
    volumes:
      - cache:/var/www/oro/var/cache

  functional-init:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    command: functional-init
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_LOCAL_RUN:
      ORO_IMAGE_TAG:
      ORO_DB_STAT_HOST:
      ORO_DB_STAT_PASSWORD:
      TESTS_LIST:
      EXCLUDED_TESTS:
      ORO_TESTS_PATH:

  functional:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    init: true
    entrypoint: docker-init -g -s -- /usr/local/bin/docker-entrypoint.sh
    command: functional
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_FUNCTIONAL_ARGS:
      ORO_LOCAL_RUN:
      ORO_IMAGE_TAG:
      ORO_DB_STAT_HOST:
      ORO_DB_STAT_PASSWORD:
      ORO_ENV: test
    tmpfs:
      - /tmp
    volumes:
      - cache:/var/www/oro/var/cache
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - ./../docker/docker-entrypoint-test.sh:/usr/local/bin/docker-entrypoint.sh

  behat-init:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    command: behat-init
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_BEHAT_ARGS:
      ORO_LOCAL_RUN:
      ORO_IMAGE_TAG:
      ORO_DB_STAT_HOST:
      ORO_DB_STAT_PASSWORD:
      TESTS_LIST:
      ORO_BEHAT_TAGS:
      ORO_ARTIFACT_DIR:
      BUILD_URL:
      ORO_ENV:

  behat:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    init: true
    entrypoint: docker-init -g -s -- /usr/local/bin/docker-entrypoint.sh
    command: behat
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_BEHAT_ARGS:
      ORO_LOCAL_RUN:
      ORO_IMAGE_TAG:
      ORO_DB_STAT_HOST:
      ORO_DB_STAT_PASSWORD:
      ORO_BEHAT_TAGS:
      ORO_BEHAT_OPTIONS:
      ORO_ARTIFACT_DIR:
      ORO_BEHAT_ATTEMPTS:
      BUILD_URL:
      ORO_ENV:
    tmpfs:
      - /tmp
    depends_on:
      "consumer":
        condition: service_started
      "operator":
        condition: service_started
      "chrome":
        condition: service_healthy
    volumes:
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}
      - var_data:/var/www/oro/var/data
      - multihost_operation_folder:$ORO_MULTIHOST_OPERATION_FOLDER
      - ./../docker/docker-entrypoint-test.sh:/usr/local/bin/docker-entrypoint.sh
      - ./../docker/behat.yml:/var/www/oro/behat_oro.yml

  behat-remote:
    image: $ORO_IMAGE_TEST:$ORO_IMAGE_TAG
    command: behat --skip-isolators
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_BEHAT_ARGS:
      ORO_APP_PROTOCOL:
      ORO_APP_DOMAIN:
      ORO_APP_ADDON_DOMAINS:
      ORO_NGINX_HOST: ''
      ORO_BEHAT_OPTIONS:
      ORO_ARTIFACT_DIR:
      BUILD_URL:
    tmpfs:
      - /tmp
    depends_on:
      "chrome":
        condition: service_healthy
      "mail":
        condition: service_started

  chrome:
    image: ${ORO_PROJECT}chrome:$ORO_CHROME_VER
    command: chrome --enable-chrome-logs --allowed-ips 0.0.0.0/0 --allowed-origins=* --whitelisted-ips=""
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_APP_DOMAIN:
      ORO_APP_ADDON_DOMAINS:
      ORO_NGINX_HOST:
      ORO_SSL:
      ORO_APP_PROTOCOL:
      ORO_NGINX_HTTPS_PORT:
      ORO_NGINX_HTTP_PORT:
      ORO_CHROME_PORT:
      DBUS_SESSION_BUS_ADDRESS: unix:path=/dev/null
    tmpfs:
      - /tmp
    healthcheck:
      test: "curl -sf http://127.0.0.1:$${ORO_CHROME_PORT}/status"
      interval: 15s
      timeout: 30s
      start_period: 240s
    restart: unless-stopped
    depends_on:
      "waf-behat":
        condition: service_healthy
    volumes:
      - /dev/shm:/dev/shm
      - var_data:/var/www/oro/var/data

  backup:
    command: -- true
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    build:
      context: ./../docker
      dockerfile: Dockerfile-init
      network: host
      args:
        ORO_BASELINE_VERSION:
        ORO_PUBLIC_PROJECT:
        ORO_PRIVATE_PROJECT:
        ORO_IMAGE_FROM: $ORO_IMAGE
        ORO_IMAGE_TAG:
        ORO_DB_HOST:
        ORO_DB_PORT:
        ORO_DB_NAME:
        ORO_DB_USER:
        ORO_DB_PASSWORD:
        ORO_DB_ROOT_USER:
        ORO_DB_ROOT_PASSWORD:
        ORO_MONGO_HOST:
        ORO_MONGO_DATABASE:
        ORO_MONGO_USER:
        ORO_MONGO_PASSWORD:
        CACHEBUST:
      tags:
        - $ORO_IMAGE_INIT:$ORO_IMAGE_TAG
      labels:
        com.oroinc.orocloud.image_type: "init"
      extra_hosts:
        - db:${DB_IP-host.docker.internal}
    depends_on:
      "db":
        condition: service_healthy

  backup-test:
    command: -- true
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    build:
      context: ./../docker
      dockerfile: Dockerfile-init
      network: host
      args:
        ORO_BASELINE_VERSION:
        ORO_PUBLIC_PROJECT:
        ORO_PRIVATE_PROJECT:
        ORO_IMAGE_FROM: $ORO_IMAGE_TEST
        ORO_IMAGE_TAG:
        ORO_DB_HOST:
        ORO_DB_PORT:
        ORO_DB_NAME:
        ORO_DB_USER:
        ORO_DB_PASSWORD:
        ORO_DB_ROOT_USER:
        ORO_DB_ROOT_PASSWORD:
        ORO_MONGO_HOST:
        ORO_MONGO_DATABASE:
        ORO_MONGO_USER:
        ORO_MONGO_PASSWORD:
        CACHEBUST:
      tags:
        - $ORO_IMAGE_INIT_TEST:$ORO_IMAGE_TAG
      labels:
        com.oroinc.orocloud.image_type: "init-test"
      extra_hosts:
        - db:${DB_IP-host.docker.internal}
    depends_on:
      "db":
        condition: service_healthy

  restore:
    image: $ORO_IMAGE_INIT${ORO_LANGUAGE_SUFFIX-}:${ORO_IMAGE_TAG_OLD-$ORO_IMAGE_TAG}
    command: restore
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV:
    depends_on:
      "volume-init":
        condition: service_completed_successfully
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache

  restore-test:
    image: $ORO_IMAGE_INIT_TEST${ORO_LANGUAGE_SUFFIX-}:${ORO_IMAGE_TAG_OLD-$ORO_IMAGE_TAG}
    command: restore-test
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV: test
    volumes:
      - cache:/var/www/oro/var/cache

  update:
    image: $ORO_IMAGE_INIT:$ORO_IMAGE_TAG
    command: script run upgrade:full:reindex
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV:
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache

  update-test:
    image: $ORO_IMAGE_INIT_TEST:$ORO_IMAGE_TAG
    command: script run upgrade:full:reindex
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV: test
    volumes:
      - cache:/var/www/oro/var/cache

  warmup-cache:
    image: $ORO_IMAGE_INIT:$ORO_IMAGE_TAG
    command: warmup-cache
    user: $ORO_USER_RUNTIME
    env_file:
      - .env
      - .env-ce-${ORO_CE-no}
    environment:
      ORO_ENV:
    volumes:
      - oro_app:/var/www/oro
      - cache:/var/www/oro/var/cache
      - maintenance_folder:${ORO_MAINTENANCE_LOCK_FOLDER}

  db:
    image: ${ORO_PROJECT}pgsql:${ORO_PG_VER}
    labels:
      com.symfony.server.service-prefix: ORO_DB
    environment:
      POSTGRES_ROOT_PASSWORD: ${ORO_DB_ROOT_PASSWORD}
      POSTGRES_DB: ${ORO_DB_NAME}
      POSTGRES_USER: ${ORO_DB_USER}
      POSTGRES_PASSWORD: ${ORO_DB_PASSWORD}
    tmpfs:
      - /var/lib/postgresql
    healthcheck:
      test: "pg_isready -U$${ORO_DB_USER} -d$${ORO_DB_NAME}"
      start_period: 60s
    restart: unless-stopped

  mail:
    image: ${ORO_PROJECT}mailcatcher
    hostname: mail
    restart: unless-stopped

  blackfire:
    image: ${ORO_PROJECT}blackfire:2
    environment:
      BLACKFIRE_SERVER_ID:
      BLACKFIRE_SERVER_TOKEN:

volumes:
  cache:
  multihost_operation_folder:
  maintenance_folder:
  nginx:
  nginx-waf:
  var_data:
